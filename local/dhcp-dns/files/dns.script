#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

set_classless_routes() {
	local max=128
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2" "$ip"
		max=$(($max-1))
		shift 2
	done
}

setup_interface () {
	for i in `seq 1 12`; do
		sleep 1
		if ifconfig $interface | grep -q 'inet addr:'; then
			break
		fi
	done
	ipmask=$(ifconfig $interface | awk '
		/inet addr:/ {	# Filter IPv4
		#   inet addr:192.168.1.1  Bcast:192.168.1.255  Mask:255.255.255.0
		$1="";		# remove inet
		$3=":";		# remove Bcast: ...
		FS=":";		# separator ":"
		$0=$0;		# reread to activate separator
		print $2 $4;
		}'
	)

	ip=$(echo "$ipmask" | awk '{print $1;}')
	subnet=$(echo "$ipmask" | awk '{print $2;}')

	proto_init_update "*" 1 true
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	# local ip_net
	# eval "$(ipcalc.sh "$ip/$mask")";ip_net="$NETWORK"

	local i
	# for i in $router; do
	# 	local gw_net
	# 	eval "$(ipcalc.sh "$i/$mask")";gw_net="$NETWORK"

	# 	[ "$ip_net" != "$gw_net" ] && proto_add_ipv4_route "$i" 32 "" "$ip"
	# 	proto_add_ipv4_route 0.0.0.0 0 "$i" "$ip"

	# 	local r
	# 	for r in $CUSTOMROUTES; do
	# 		proto_add_ipv4_route "${r%%/*}" "${r##*/}" "$i" "$ip"
	# 	done
	# done

	# CIDR STATIC ROUTES (rfc3442)
	# [ -n "$staticroutes" ] && set_classless_routes $staticroutes
	# [ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes

	for i in $dns; do
		proto_add_dns_server "$i"
	done
	for i in $domain; do
		proto_add_dns_search "$i"
	done

	proto_add_data
	[ -n "$ZONE" ]     && json_add_string zone "$ZONE"
	[ -n "$ntpsrv" ]   && json_add_string ntpserver "$ntpsrv"
	[ -n "$timesvr" ]  && json_add_string timeserver "$timesvr"
	[ -n "$hostname" ] && json_add_string hostname "$hostname"
	[ -n "$message" ]  && json_add_string message "$message"
	[ -n "$timezone" ] && json_add_int timezone "$timezone"
	[ -n "$lease" ]    && json_add_int leasetime "$lease"
	proto_close_data

	proto_send_update "$INTERFACE"
}

deconfig_interface() {
	proto_init_update "*" 0 true
	proto_send_update "$INTERFACE"
}

case "$1" in
	deconfig)
		deconfig_interface
	;;
	renew|bound)
		setup_interface
	;;
esac

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user "$@"

exit 0
